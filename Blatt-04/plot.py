import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit


Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_1_C_1.txt' , unpack=True)
plt.plot( ort_x_1 , ort_y_1 , 'r-' , label=r'$\vec{r}_1$' )
plt.plot( ort_x_2, ort_y_2 , 'b-' , label=r'$\vec{r}_2$' )
plt.legend(loc='best')
plt.ylim(-2 , 0)
plt.grid()
plt.savefig("Plots/Plot_1_C_1_trajektorie.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_1_C_1.txt' , unpack=True)
plt.plot(Zeit , Energie_kin , 'r-' , label=r'$E_{kin}$' )
plt.plot(Zeit , Energie_pot , 'b-' , label=r'$E_{pot}$' )
plt.plot(Zeit , Energie_pot+Energie_kin , 'k-', label=r'$E_{ges}$' )
plt.legend(loc='best')
plt.grid()
plt.savefig("Plots/Plot_1_C_1_energie.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_1.txt' , unpack=True)
plt.plot( ort_x_1 , ort_y_1 , 'r-' , label=r'$\vec{r}_1$' )
plt.plot( ort_x_2, ort_y_2 , 'b-' , label=r'$\vec{r}_2$' )
plt.ylim(-2 , 0)
plt.legend(loc='best')
plt.grid()
plt.savefig("Plots/Plot_2_A_1_trajektorie.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_1.txt' , unpack=True)
plt.plot(Zeit , Energie_kin , 'r-' , label=r'$E_{kin}$' )
plt.plot(Zeit , Energie_pot , 'b-' , label=r'$E_{pot}$' )
plt.plot(Zeit , Energie_pot+Energie_kin , 'k-', label=r'$E_{ges}$' )
plt.legend(loc='best')
plt.grid()
plt.savefig("Plots/Plot_2_A_1_energie.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_2.txt' , unpack=True)
plt.plot( ort_x_1 , ort_y_1 , 'r-' , label=r'$\vec{r}_1$' )
plt.plot( ort_x_2, ort_y_2 , 'b-' , label=r'$\vec{r}_2$' )
plt.ylim(-2 , 2)
plt.legend(loc='best')
plt.grid()
plt.savefig("Plots/Plot_2_A_2_trajektorie.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_2.txt' , unpack=True)
plt.plot(Zeit , Energie_kin , 'r-' , label=r'$E_{kin}$' )
plt.plot(Zeit , Energie_pot , 'b-' , label=r'$E_{pot}$' )
plt.plot(Zeit , Energie_pot+Energie_kin , 'k-', label=r'$E_{ges}$' )
plt.legend(loc='best')
plt.grid()
plt.savefig("Plots/Plot_2_A_2_energie.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_1.txt' , unpack=True)
plt.plot(theta_1 , theta_V_1 , 'b-')
plt.xlabel( r'$\theta_1$')
plt.ylabel( r'$\dot{\theta}_1$')
plt.grid()
plt.savefig("Plots/Plot_2_A_1_Phasenraum.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_2.txt' , unpack=True)
plt.plot(theta_1 , theta_V_1 , 'b-')
plt.xlabel( r'$\theta_1$')
plt.ylabel( r'$\dot{\theta}_1$')
plt.grid()
plt.savefig("Plots/Plot_2_A_2_Phasenraum.pdf")
plt.clf()

Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_1_C_1.txt' , unpack=True)
plt.plot(theta_1 , theta_V_1 , 'b-')
plt.xlabel( r'$\theta_1$')
plt.ylabel( r'$\dot{\theta}_1$')
plt.grid()
plt.savefig("Plots/Plot_2_A_3_Phasenraum.pdf")
plt.clf()

Zeit_ , theta_1_ , theta_2_ , theta_V_1_ , theta_V_2_ , ort_x_1_ , ort_y_1_ , ort_x_2_ , ort_y_2_ , Energie_kin_ , Energie_pot_ = np.genfromtxt( 'Ergebnisse/Ergebnis_2_B_1.txt' , unpack=True)
Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_1.txt' , unpack=True)
d = np.sqrt( (theta_1 - theta_1_)**2 + (theta_2 - theta_2_)**2 + (theta_V_1 - theta_V_1_)**2 + (theta_V_2 - theta_V_2_)**2 )
plt.plot( Zeit , d)
plt.xlabel(r'Zeit[$s$]')
plt.ylabel(r'Abstand im Phasenraum')
plt.grid()
plt.savefig("Plots/Plot_2_B_1.pdf")
plt.clf()

Zeit_ , theta_1_ , theta_2_ , theta_V_1_ , theta_V_2_ , ort_x_1_ , ort_y_1_ , ort_x_2_ , ort_y_2_ , Energie_kin_ , Energie_pot_ = np.genfromtxt( 'Ergebnisse/Ergebnis_2_B_2.txt' , unpack=True)
Zeit , theta_1 , theta_2 , theta_V_1 , theta_V_2 , ort_x_1 , ort_y_1 , ort_x_2 , ort_y_2 , Energie_kin , Energie_pot = np.genfromtxt( 'Ergebnisse/Ergebnis_2_A_2.txt' , unpack=True)
d = np.sqrt( (theta_1 - theta_1_)**2 + (theta_2 - theta_2_)**2 + (theta_V_1 - theta_V_1_)**2 + (theta_V_2 - theta_V_2_)**2 )
plt.plot( Zeit , d)
plt.xlabel(r'Zeit[$s$]')
plt.ylabel(r'Abstand im Phasenraum')
plt.grid()
plt.savefig("Plots/Plot_2_B_2.pdf")
plt.clf()